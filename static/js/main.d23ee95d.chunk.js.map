{"version":3,"sources":["../../src/index.js","ethereum.js","Content.js","index.js","App.js"],"names":["isBrowser","window","PropTypesEthereum","ethereum","PropTypes","accounts","error","chainId","awaiting","requestConnection","isRequired","EthereumContext","initial","Context","React","ContextProvider","EthereumContextProvider","a","Error","response","nextState","Number","this","Promise","b","console","state","internalValue","handleConnect","value","createEthereumContext","Content","props","useContext","type","onClick","length","Object","getOwnPropertyNames","map","name","key","account","String","message","ReactDOM","render","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.d23ee95d.chunk.js","sourcesContent":["/* eslint-disable consistent-return */\n/* eslint-disable no-void */\n/* eslint-disable promise/catch-or-return */\n/* eslint-disable promise/prefer-await-to-then */\n/* eslint-disable class-methods-use-this */\n\nimport React, { Component } from \"react\"; // eslint-disable-line import/no-unresolved\nimport PropTypes from \"prop-types\";\n\nfunction isBrowser() {\n  return typeof window !== \"undefined\";\n}\n\nfunction getDisplayName(WrappedComponent) {\n  return WrappedComponent.displayName || WrappedComponent.name || \"Component\";\n}\n\nexport function createEthereumContext(initial = null) {\n  const Context = React.createContext(initial);\n  Context.displayName = \"EthereumContext\";\n\n  const ContextProvider = Context.Provider;\n\n  class EthereumContextProvider extends Component {\n    constructor(props) {\n      super(props);\n\n      this.state = {\n        ethereum: isBrowser() ? window.ethereum : null,\n        chainId: null,\n        accounts: [],\n        awaiting: false,\n        error: null,\n      };\n\n      this.listenerClose = null;\n      this.listenerNetwork = null;\n      this.listenerChain = null;\n      this.listenerAccount = null;\n    }\n\n    async componentDidMount() {\n      if (!isBrowser() || !window.ethereum) {\n        return void 0;\n      }\n\n      try {\n        this.listenerClose = window.ethereum.on(\"close\", this.handleClose);\n        this.listenerNetwork = window.ethereum.on(\n          \"networkChanged\",\n          this.handleChainChange,\n        );\n        this.listenerChain = window.ethereum.on(\n          \"chainChanged\",\n          this.handleChainChange,\n        );\n        this.listenerAccount = window.ethereum.on(\n          \"accountsChanged\",\n          this.handleAccountChange,\n        );\n\n        const [a, b] = await Promise.all([\n          window.ethereum.send(\"eth_chainId\"),\n          window.ethereum.send(\"eth_accounts\"),\n        ]);\n        // const { result: chainId } = await window.ethereum.send(\"eth_chainId\");\n        // const { result: accounts } = await window.ethereum.send(\"eth_accounts\");\n\n        this.setState({\n          chainId: a ? Number(a.result) || null : null,\n          accounts: b ? b.result : [],\n        });\n      } catch (error) {\n        console.error(\n          \"react-metamask:\",\n          \"Error getting current network and accounts\",\n          error,\n        );\n      }\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n      // if any of this values changes to `undefined` we will re-render.\n      if (this.state.ethereum !== nextState.ethereum) {\n        return true;\n      }\n\n      const equal =\n        this.state.chainId === nextState.chainId &&\n        this.state.accounts[0] === nextState.accounts[0] &&\n        this.state.awaiting === nextState.awaiting &&\n        this.state.error === nextState.error;\n      return !equal;\n    }\n\n    componentWillUnmount() {\n      window.ethereum.removeListener(\"close\", this.handleClose);\n      window.ethereum.removeListener(\"networkChanged\", this.handleChainChange);\n      window.ethereum.removeListener(\"chainChanged\", this.handleChainChange);\n      window.ethereum.removeListener(\n        \"accountsChanged\",\n        this.handleAccountChange,\n      );\n    }\n\n    handleConnect = async () => {\n      try {\n        if (!window.ethereum) {\n          throw new Error(\"Current browser is not web3 enabled\");\n        }\n\n        this.setState({ awaiting: true });\n\n        const response = await window.ethereum.send(\"eth_requestAccounts\");\n\n        const nextState = {\n          ethereum: window.ethereum,\n          accounts: response ? response[\"result\"] : [],\n          error: null,\n          awaiting: false,\n        };\n        this.setState(nextState);\n        return nextState;\n      } catch (error) {\n        const nextState = {\n          ethereum: window.ethereum,\n          accounts: [],\n          error,\n          awaiting: false,\n        };\n        this.setState(nextState);\n        return nextState;\n      }\n    };\n\n    handleChainChange = chainId => {\n      if (chainId) {\n        this.setState({ chainId: Number(chainId) });\n      } else {\n        this.setState({ chainId: null });\n      }\n    };\n\n    handleChainChangeError = error => {\n      // Metamask says this should never happen\n      this.setState({ error });\n    };\n\n    handleAccountChange = async accounts => {\n      this.setState({ accounts });\n    };\n\n    handleAccountChangeError = error => {\n      // Metamask says this should never happen\n      this.setState({ error });\n    };\n\n    handleClose = (code, reason) => {\n      const error = new Error(`Connection closed`);\n      error.code = code;\n      error.reason = reason;\n      this.setState({ accounts: [], chainId: null, error });\n    };\n\n    render() {\n      const internalValue = {\n        ethereum: this.state.ethereum,\n        accounts: this.state.accounts,\n        error: this.state.error,\n        chainId: this.state.chainId,\n\n        awaiting: this.state.awaiting,\n        requestConnection: this.handleConnect,\n      };\n\n      return <ContextProvider {...this.props} value={internalValue} />;\n    }\n  }\n\n  Context.Provider = EthereumContextProvider;\n  return Context;\n}\n\nexport function withEthereum(EthereumContext) {\n  return function withEthereumContext(Comp) {\n    const ComponentWithEthereum = React.forwardRef((props, ref) => (\n      <EthereumContext.Consumer>\n        {ethereum => <Comp ref={ref} ethereum={ethereum} {...props} />}\n      </EthereumContext.Consumer>\n    ));\n\n    ComponentWithEthereum.displayName = `withEthereum(${getDisplayName(Comp)})`;\n\n    return ComponentWithEthereum;\n  };\n}\n\nexport const PropTypesEthereum = {\n  ethereum: PropTypes.object,\n  accounts: PropTypes.arrayOf(PropTypes.string).isRequired,\n  error: PropTypes.object, // `Error` type\n  chainId: PropTypes.number,\n  awaiting: PropTypes.bool.isRequired,\n  requestConnection: PropTypes.func.isRequired,\n};\n\nexport const PropTypesEthereumObject = PropTypes.shape(PropTypesEthereum);\n","// eslint-disable-next-line import/no-extraneous-dependencies\nimport { createEthereumContext } from \"@daisypayments/react-ethereum\";\n\nconst EthereumContext = createEthereumContext();\n\nexport default EthereumContext;\n","import React, { useContext } from \"react\";\n\nimport EthereumContext from \"./ethereum\";\n\nexport default function Content(props) {\n  const {\n    ethereum,\n    accounts,\n    chainId,\n    awaiting,\n    error,\n    requestConnection,\n  } = useContext(EthereumContext);\n\n  return (\n    <div {...props}>\n      <p>Press here:</p>\n      <button type=\"button\" onClick={requestConnection}>\n        {accounts.length === 0 ? \"Connect\" : \"Already connected\"}\n      </button>\n      <ul>\n        {ethereum ? (\n          <li>\n            <code>ethereum</code> object with:{\" \"}\n            <ul>\n              {Object.getOwnPropertyNames(ethereum).map(name => (\n                <li key={name}>\n                  <code>{name}</code>\n                </li>\n              ))}\n            </ul>\n          </li>\n        ) : (\n          <li>\n            <code>ethereum</code> object is <code>null</code>\n          </li>\n        )}\n        <li>\n          <code>accounts</code> array with:\n          <ol>\n            {accounts.map(account => (\n              <li key={account}>\n                <code>{account}</code>\n              </li>\n            ))}\n          </ol>\n        </li>\n        <li>\n          Network (<code>chainId</code>): <code>{chainId}</code>\n        </li>\n        <li>\n          Waiting for user (<code>awaiting</code>):{\" \"}\n          <code>{String(awaiting)}</code>\n        </li>\n        <li>\n          <code>error</code>: <code>{error ? error.message : \"null\"}</code>\n        </li>\n      </ul>\n    </div>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n","import React from \"react\";\n\nimport EthereumContext from \"./ethereum\";\nimport Content from \"./Content\";\n\nexport default function App() {\n  return (\n    <div>\n      <h3>Hello d-app user</h3>\n      <EthereumContext.Provider>\n        <Content />\n      </EthereumContext.Provider>\n    </div>\n  );\n}\n"],"sourceRoot":""}