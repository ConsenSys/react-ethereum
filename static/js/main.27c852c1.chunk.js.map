{"version":3,"sources":["../../src/index.js","ethereum.js","Content.js","index.js","App.js"],"names":["isBrowser","window","PropTypesEthereum","ethereum","PropTypes","accounts","error","chainId","awaiting","requestConnection","isRequired","EthereumContext","initial","Context","React","ContextProvider","EthereumContextProvider","response","Number","Error","this","Promise","state","nextState","internalValue","handleConnect","value","createEthereumContext","Content","props","useContext","type","onClick","Object","keys","join","String","message","ReactDOM","render","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.27c852c1.chunk.js","sourcesContent":["/* eslint-disable consistent-return */\n/* eslint-disable no-void */\n/* eslint-disable promise/catch-or-return */\n/* eslint-disable promise/prefer-await-to-then */\n/* eslint-disable class-methods-use-this */\nimport React, { Component } from \"react\"; // eslint-disable-line import/no-unresolved\nimport PropTypes from \"prop-types\";\n\nfunction isBrowser() {\n  return typeof window !== \"undefined\";\n}\n\nfunction getDisplayName(WrappedComponent) {\n  return WrappedComponent.displayName || WrappedComponent.name || \"Component\";\n}\n\nexport function createEthereumContext(initial = null) {\n  const Context = React.createContext(initial);\n  Context.displayName = \"EthereumContext\";\n\n  const ContextProvider = Context.Provider;\n\n  class EthereumContextProvider extends Component {\n    constructor(props) {\n      super(props);\n\n      this.state = {\n        ethereum: isBrowser() ? window.ethereum : null,\n        chainId: null,\n        accounts: [],\n        awaiting: false,\n        error: null,\n      };\n\n      this.listenerClose = null;\n      this.listenerNetwork = null;\n      this.listenerChain = null;\n      this.listenerAccount = null;\n    }\n\n    async componentDidMount() {\n      if (!isBrowser()) {\n        return void 0;\n      }\n\n      this.listenerClose = window.ethereum.on(\"close\", this.handleClose);\n      this.listenerNetwork = window.ethereum.on(\n        \"networkChanged\",\n        this.handleChainChange,\n      );\n      this.listenerChain = window.ethereum.on(\n        \"chainChanged\",\n        this.handleChainChange,\n      );\n      this.listenerAccount = window.ethereum.on(\n        \"accountsChanged\",\n        this.handleAccountChange,\n      );\n\n      const [{ result: chainId }, { result: accounts }] = await Promise.all([\n        window.ethereum.send(\"eth_chainId\"),\n        window.ethereum.send(\"eth_accounts\"),\n      ]);\n      // const { result: chainId } = await window.ethereum.send(\"eth_chainId\");\n      // const { result: accounts } = await window.ethereum.send(\"eth_accounts\");\n\n      this.setState({\n        chainId: Number(chainId) || null,\n        accounts,\n      });\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n      // if any of this values changes to `undefined` we will re-render.\n      if (this.state.ethereum !== nextState.ethereum) {\n        return true;\n      }\n\n      const equal =\n        this.state.chainId === nextState.chainId &&\n        this.state.accounts[0] === nextState.accounts[0] &&\n        this.state.awaiting === nextState.awaiting &&\n        this.state.error === nextState.error;\n      return !equal;\n    }\n\n    componentWillUnmount() {\n      window.ethereum.removeListener(\"close\", this.handleClose);\n      window.ethereum.removeListener(\"networkChanged\", this.handleChainChange);\n      window.ethereum.removeListener(\"chainChanged\", this.handleChainChange);\n      window.ethereum.removeListener(\n        \"accountsChanged\",\n        this.handleAccountChange,\n      );\n    }\n\n    handleConnect = async () => {\n      try {\n        this.setState({ awaiting: true });\n        const response = await window.ethereum.send(\"eth_requestAccounts\");\n        this.setState({\n          accounts: response[\"result\"],\n          awaiting: false,\n          error: null,\n        });\n        return {\n          ethereum: window.ethereum,\n          accounts: response[\"result\"],\n          error: null,\n        };\n      } catch (error) {\n        this.setState({ error, awaiting: false });\n        return { ethereum: window.ethereum, accounts: [], error };\n      }\n    };\n\n    handleChainChange = chainId => {\n      if (chainId) {\n        this.setState({ chainId: Number(chainId) });\n      } else {\n        this.setState({ chainId: null });\n      }\n    };\n\n    handleChainChangeError = error => {\n      // Metamask says this should never happen\n      this.setState({ error });\n    };\n\n    handleAccountChange = async accounts => {\n      this.setState({ accounts });\n    };\n\n    handleAccountChangeError = error => {\n      // Metamask says this should never happen\n      this.setState({ error });\n    };\n\n    handleClose = (code, reason) => {\n      const error = new Error(`Connection closed`);\n      error.code = code;\n      error.reason = reason;\n      this.setState({ accounts: [], chainId: null, error });\n    };\n\n    render() {\n      const internalValue = {\n        ethereum: this.state.ethereum,\n        accounts: this.state.accounts,\n        error: this.state.error,\n        chainId: this.state.chainId,\n\n        awaiting: this.state.awaiting,\n        requestConnection: this.handleConnect,\n      };\n\n      return <ContextProvider {...this.props} value={internalValue} />;\n    }\n  }\n\n  Context.Provider = EthereumContextProvider;\n  return Context;\n}\n\nexport function withEthereum(EthereumContext) {\n  return function withEthereumContext(Comp) {\n    const ComponentWithEthereum = React.forwardRef((props, ref) => (\n      <EthereumContext.Consumer>\n        {ethereum => <Comp ref={ref} ethereum={ethereum} {...props} />}\n      </EthereumContext.Consumer>\n    ));\n\n    ComponentWithEthereum.displayName = `withEthereum(${getDisplayName(Comp)})`;\n\n    return ComponentWithEthereum;\n  };\n}\n\nexport const PropTypesEthereum = {\n  ethereum: PropTypes.object,\n  accounts: PropTypes.arrayOf(PropTypes.string).isRequired,\n  error: PropTypes.object, // `Error` type\n  chainId: PropTypes.number.isRequired,\n  awaiting: PropTypes.bool.isRequired,\n  requestConnection: PropTypes.func.isRequired,\n};\n\nexport const PropTypesEthereumObject = PropTypes.shape(PropTypesEthereum);\n","// eslint-disable-next-line import/no-extraneous-dependencies\nimport { createEthereumContext } from \"@daisypayments/react-ethereum\";\n\nconst EthereumContext = createEthereumContext();\n\nexport default EthereumContext;\n","import React, { useContext } from \"react\";\n\nimport EthereumContext from \"./ethereum\";\n\nexport default function Content(props) {\n  const {\n    ethereum,\n    accounts,\n    chainId,\n    awaiting,\n    error,\n    requestConnection,\n  } = useContext(EthereumContext);\n\n  return (\n    <div {...props}>\n      <p>Press here:</p>\n      <button type=\"button\" onClick={requestConnection}>\n        Action\n      </button>\n      <ul>\n        <li>\n          Ethereum object with: <code>{Object.keys(ethereum).join(\", \")}</code>\n        </li>\n        <li>Account: {accounts.join(\", \")}</li>\n        <li>Network: {chainId}</li>\n        <li>Waiting for user: {String(awaiting)}</li>\n        <li>Error: {error && error.message}</li>\n      </ul>\n    </div>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n","import React from \"react\";\n\nimport EthereumContext from \"./ethereum\";\nimport Content from \"./Content\";\n\nexport default function App() {\n  return (\n    <div>\n      <h3>Hello d-app user</h3>\n      <EthereumContext.Provider>\n        <Content />\n      </EthereumContext.Provider>\n    </div>\n  );\n}\n"],"sourceRoot":""}